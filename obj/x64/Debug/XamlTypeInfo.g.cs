//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace Music_thing
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::Music_thing.Music_thing_XamlTypeInfo.XamlMetaDataProvider __appProvider;
        private global::Music_thing.Music_thing_XamlTypeInfo.XamlMetaDataProvider _AppProvider
        {
            get
            {
                if (__appProvider == null)
                {
                    __appProvider = new global::Music_thing.Music_thing_XamlTypeInfo.XamlMetaDataProvider();
                }
                return __appProvider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return _AppProvider.GetXamlType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return _AppProvider.GetXamlType(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return _AppProvider.GetXmlnsDefinitions();
        }
    }
}

namespace Music_thing.Music_thing_XamlTypeInfo
{
    /// <summary>
    /// Main class for providing metadata for the app or library
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class XamlMetaDataProvider : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::Music_thing.Music_thing_XamlTypeInfo.XamlTypeInfoProvider _provider = null;

        private global::Music_thing.Music_thing_XamlTypeInfo.XamlTypeInfoProvider Provider
        {
            get
            {
                if (_provider == null)
                {
                    _provider = new global::Music_thing.Music_thing_XamlTypeInfo.XamlTypeInfoProvider();
                }
                return _provider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return Provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return Provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType) 
            { 
                if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByType(type);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType)
            {
                if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByName(typeName);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            lock (_xamlMembers)
            {
                if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
                {
                    return xamlMember;
                }
                xamlMember = CreateXamlMember(longMemberName);
                if (xamlMember != null)
                {
                    _xamlMembers.Add(longMemberName, xamlMember);
                }
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[28];
            _typeNameTable[0] = "Music_thing.AlbumList";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[2] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[3] = "System.Collections.ObjectModel.ObservableCollection`1<Music_thing.Album>";
            _typeNameTable[4] = "System.Collections.ObjectModel.Collection`1<Music_thing.Album>";
            _typeNameTable[5] = "Object";
            _typeNameTable[6] = "Music_thing.Album";
            _typeNameTable[7] = "String";
            _typeNameTable[8] = "Int32";
            _typeNameTable[9] = "System.Collections.Generic.List`1<Int32>";
            _typeNameTable[10] = "Music_thing.AlbumPage";
            _typeNameTable[11] = "System.Collections.ObjectModel.ObservableCollection`1<Music_thing.Song>";
            _typeNameTable[12] = "System.Collections.ObjectModel.Collection`1<Music_thing.Song>";
            _typeNameTable[13] = "Music_thing.Song";
            _typeNameTable[14] = "TimeSpan";
            _typeNameTable[15] = "System.ValueType";
            _typeNameTable[16] = "UInt32";
            _typeNameTable[17] = "Windows.Storage.StorageFile";
            _typeNameTable[18] = "Windows.UI.Xaml.Media.Imaging.BitmapImage";
            _typeNameTable[19] = "Music_thing.ArtistList";
            _typeNameTable[20] = "System.Collections.ObjectModel.ObservableCollection`1<Music_thing.Artist>";
            _typeNameTable[21] = "System.Collections.ObjectModel.Collection`1<Music_thing.Artist>";
            _typeNameTable[22] = "Music_thing.Artist";
            _typeNameTable[23] = "Music_thing.MainPage";
            _typeNameTable[24] = "Music_thing.NowPlaying";
            _typeNameTable[25] = "Music_thing.RecentlyPlayed";
            _typeNameTable[26] = "Music_thing.SettingsPage";
            _typeNameTable[27] = "Music_thing.SongList";

            _typeTable = new global::System.Type[28];
            _typeTable[0] = typeof(global::Music_thing.AlbumList);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[2] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[3] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Music_thing.Album>);
            _typeTable[4] = typeof(global::System.Collections.ObjectModel.Collection<global::Music_thing.Album>);
            _typeTable[5] = typeof(global::System.Object);
            _typeTable[6] = typeof(global::Music_thing.Album);
            _typeTable[7] = typeof(global::System.String);
            _typeTable[8] = typeof(global::System.Int32);
            _typeTable[9] = typeof(global::System.Collections.Generic.List<global::System.Int32>);
            _typeTable[10] = typeof(global::Music_thing.AlbumPage);
            _typeTable[11] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Music_thing.Song>);
            _typeTable[12] = typeof(global::System.Collections.ObjectModel.Collection<global::Music_thing.Song>);
            _typeTable[13] = typeof(global::Music_thing.Song);
            _typeTable[14] = typeof(global::System.TimeSpan);
            _typeTable[15] = typeof(global::System.ValueType);
            _typeTable[16] = typeof(global::System.UInt32);
            _typeTable[17] = typeof(global::Windows.Storage.StorageFile);
            _typeTable[18] = typeof(global::Windows.UI.Xaml.Media.Imaging.BitmapImage);
            _typeTable[19] = typeof(global::Music_thing.ArtistList);
            _typeTable[20] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Music_thing.Artist>);
            _typeTable[21] = typeof(global::System.Collections.ObjectModel.Collection<global::Music_thing.Artist>);
            _typeTable[22] = typeof(global::Music_thing.Artist);
            _typeTable[23] = typeof(global::Music_thing.MainPage);
            _typeTable[24] = typeof(global::Music_thing.NowPlaying);
            _typeTable[25] = typeof(global::Music_thing.RecentlyPlayed);
            _typeTable[26] = typeof(global::Music_thing.SettingsPage);
            _typeTable[27] = typeof(global::Music_thing.SongList);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_AlbumList() { return new global::Music_thing.AlbumList(); }
        private object Activate_3_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Music_thing.Album>(); }
        private object Activate_4_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Music_thing.Album>(); }
        private object Activate_6_Album() { return new global::Music_thing.Album(); }
        private object Activate_9_List() { return new global::System.Collections.Generic.List<global::System.Int32>(); }
        private object Activate_10_AlbumPage() { return new global::Music_thing.AlbumPage(); }
        private object Activate_11_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Music_thing.Song>(); }
        private object Activate_12_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Music_thing.Song>(); }
        private object Activate_13_Song() { return new global::Music_thing.Song(); }
        private object Activate_19_ArtistList() { return new global::Music_thing.ArtistList(); }
        private object Activate_20_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Music_thing.Artist>(); }
        private object Activate_21_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Music_thing.Artist>(); }
        private object Activate_22_Artist() { return new global::Music_thing.Artist(); }
        private object Activate_23_MainPage() { return new global::Music_thing.MainPage(); }
        private object Activate_24_NowPlaying() { return new global::Music_thing.NowPlaying(); }
        private object Activate_25_RecentlyPlayed() { return new global::Music_thing.RecentlyPlayed(); }
        private object Activate_26_SettingsPage() { return new global::Music_thing.SettingsPage(); }
        private object Activate_27_SongList() { return new global::Music_thing.SongList(); }
        private void VectorAdd_3_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Music_thing.Album>)instance;
            var newItem = (global::Music_thing.Album)item;
            collection.Add(newItem);
        }
        private void VectorAdd_4_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Music_thing.Album>)instance;
            var newItem = (global::Music_thing.Album)item;
            collection.Add(newItem);
        }
        private void VectorAdd_9_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Int32>)instance;
            var newItem = (global::System.Int32)item;
            collection.Add(newItem);
        }
        private void VectorAdd_11_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Music_thing.Song>)instance;
            var newItem = (global::Music_thing.Song)item;
            collection.Add(newItem);
        }
        private void VectorAdd_12_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Music_thing.Song>)instance;
            var newItem = (global::Music_thing.Song)item;
            collection.Add(newItem);
        }
        private void VectorAdd_20_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Music_thing.Artist>)instance;
            var newItem = (global::Music_thing.Artist)item;
            collection.Add(newItem);
        }
        private void VectorAdd_21_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Music_thing.Artist>)instance;
            var newItem = (global::Music_thing.Artist)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::Music_thing.Music_thing_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Music_thing.AlbumList
                userType = new global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_0_AlbumList;
                userType.AddMemberName("Albums");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::Music_thing.Music_thing_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::Music_thing.Music_thing_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  System.Collections.ObjectModel.ObservableCollection`1<Music_thing.Album>
                userType = new global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Music_thing.Album>"));
                userType.CollectionAdd = VectorAdd_3_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 4:   //  System.Collections.ObjectModel.Collection`1<Music_thing.Album>
                userType = new global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_4_Collection;
                userType.CollectionAdd = VectorAdd_4_Collection;
                xamlType = userType;
                break;

            case 5:   //  Object
                xamlType = new global::Music_thing.Music_thing_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  Music_thing.Album
                userType = new global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_6_Album;
                userType.AddMemberName("name");
                userType.AddMemberName("artist");
                userType.AddMemberName("key");
                userType.AddMemberName("year");
                userType.AddMemberName("Songids");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 7:   //  String
                xamlType = new global::Music_thing.Music_thing_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 8:   //  Int32
                xamlType = new global::Music_thing.Music_thing_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 9:   //  System.Collections.Generic.List`1<Int32>
                userType = new global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_9_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 10:   //  Music_thing.AlbumPage
                userType = new global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_10_AlbumPage;
                userType.AddMemberName("Songs");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 11:   //  System.Collections.ObjectModel.ObservableCollection`1<Music_thing.Song>
                userType = new global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Music_thing.Song>"));
                userType.CollectionAdd = VectorAdd_11_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 12:   //  System.Collections.ObjectModel.Collection`1<Music_thing.Song>
                userType = new global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_12_Collection;
                userType.CollectionAdd = VectorAdd_12_Collection;
                xamlType = userType;
                break;

            case 13:   //  Music_thing.Song
                userType = new global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_13_Song;
                userType.AddMemberName("id");
                userType.AddMemberName("FileName");
                userType.AddMemberName("Title");
                userType.AddMemberName("Artist");
                userType.AddMemberName("AlbumArtist");
                userType.AddMemberName("Album");
                userType.AddMemberName("Duration");
                userType.AddMemberName("Year");
                userType.AddMemberName("TrackNumber");
                userType.AddMemberName("Bitrate");
                userType.AddMemberName("File");
                userType.AddMemberName("AlbumArt");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 14:   //  TimeSpan
                userType = new global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 15:   //  System.ValueType
                userType = new global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 16:   //  UInt32
                xamlType = new global::Music_thing.Music_thing_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 17:   //  Windows.Storage.StorageFile
                userType = new global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 18:   //  Windows.UI.Xaml.Media.Imaging.BitmapImage
                xamlType = new global::Music_thing.Music_thing_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 19:   //  Music_thing.ArtistList
                userType = new global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_19_ArtistList;
                userType.AddMemberName("Artists");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 20:   //  System.Collections.ObjectModel.ObservableCollection`1<Music_thing.Artist>
                userType = new global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Music_thing.Artist>"));
                userType.CollectionAdd = VectorAdd_20_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 21:   //  System.Collections.ObjectModel.Collection`1<Music_thing.Artist>
                userType = new global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_21_Collection;
                userType.CollectionAdd = VectorAdd_21_Collection;
                xamlType = userType;
                break;

            case 22:   //  Music_thing.Artist
                userType = new global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_22_Artist;
                userType.AddMemberName("name");
                userType.AddMemberName("year");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 23:   //  Music_thing.MainPage
                userType = new global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_23_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 24:   //  Music_thing.NowPlaying
                userType = new global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_24_NowPlaying;
                userType.AddMemberName("Playlist");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 25:   //  Music_thing.RecentlyPlayed
                userType = new global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_25_RecentlyPlayed;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 26:   //  Music_thing.SettingsPage
                userType = new global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_26_SettingsPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 27:   //  Music_thing.SongList
                userType = new global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_27_SongList;
                userType.AddMemberName("Songs");
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }


        private object get_0_AlbumList_Albums(object instance)
        {
            var that = (global::Music_thing.AlbumList)instance;
            return that.Albums;
        }
        private void set_0_AlbumList_Albums(object instance, object Value)
        {
            var that = (global::Music_thing.AlbumList)instance;
            that.Albums = (global::System.Collections.ObjectModel.ObservableCollection<global::Music_thing.Album>)Value;
        }
        private object get_1_Album_name(object instance)
        {
            var that = (global::Music_thing.Album)instance;
            return that.name;
        }
        private void set_1_Album_name(object instance, object Value)
        {
            var that = (global::Music_thing.Album)instance;
            that.name = (global::System.String)Value;
        }
        private object get_2_Album_artist(object instance)
        {
            var that = (global::Music_thing.Album)instance;
            return that.artist;
        }
        private void set_2_Album_artist(object instance, object Value)
        {
            var that = (global::Music_thing.Album)instance;
            that.artist = (global::System.String)Value;
        }
        private object get_3_Album_key(object instance)
        {
            var that = (global::Music_thing.Album)instance;
            return that.key;
        }
        private void set_3_Album_key(object instance, object Value)
        {
            var that = (global::Music_thing.Album)instance;
            that.key = (global::System.String)Value;
        }
        private object get_4_Album_year(object instance)
        {
            var that = (global::Music_thing.Album)instance;
            return that.year;
        }
        private void set_4_Album_year(object instance, object Value)
        {
            var that = (global::Music_thing.Album)instance;
            that.year = (global::System.Int32)Value;
        }
        private object get_5_Album_Songids(object instance)
        {
            var that = (global::Music_thing.Album)instance;
            return that.Songids;
        }
        private void set_5_Album_Songids(object instance, object Value)
        {
            var that = (global::Music_thing.Album)instance;
            that.Songids = (global::System.Collections.Generic.List<global::System.Int32>)Value;
        }
        private object get_6_AlbumPage_Songs(object instance)
        {
            var that = (global::Music_thing.AlbumPage)instance;
            return that.Songs;
        }
        private void set_6_AlbumPage_Songs(object instance, object Value)
        {
            var that = (global::Music_thing.AlbumPage)instance;
            that.Songs = (global::System.Collections.ObjectModel.ObservableCollection<global::Music_thing.Song>)Value;
        }
        private object get_7_Song_id(object instance)
        {
            var that = (global::Music_thing.Song)instance;
            return that.id;
        }
        private void set_7_Song_id(object instance, object Value)
        {
            var that = (global::Music_thing.Song)instance;
            that.id = (global::System.Int32)Value;
        }
        private object get_8_Song_FileName(object instance)
        {
            var that = (global::Music_thing.Song)instance;
            return that.FileName;
        }
        private void set_8_Song_FileName(object instance, object Value)
        {
            var that = (global::Music_thing.Song)instance;
            that.FileName = (global::System.String)Value;
        }
        private object get_9_Song_Title(object instance)
        {
            var that = (global::Music_thing.Song)instance;
            return that.Title;
        }
        private void set_9_Song_Title(object instance, object Value)
        {
            var that = (global::Music_thing.Song)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_10_Song_Artist(object instance)
        {
            var that = (global::Music_thing.Song)instance;
            return that.Artist;
        }
        private void set_10_Song_Artist(object instance, object Value)
        {
            var that = (global::Music_thing.Song)instance;
            that.Artist = (global::System.String)Value;
        }
        private object get_11_Song_AlbumArtist(object instance)
        {
            var that = (global::Music_thing.Song)instance;
            return that.AlbumArtist;
        }
        private void set_11_Song_AlbumArtist(object instance, object Value)
        {
            var that = (global::Music_thing.Song)instance;
            that.AlbumArtist = (global::System.String)Value;
        }
        private object get_12_Song_Album(object instance)
        {
            var that = (global::Music_thing.Song)instance;
            return that.Album;
        }
        private void set_12_Song_Album(object instance, object Value)
        {
            var that = (global::Music_thing.Song)instance;
            that.Album = (global::System.String)Value;
        }
        private object get_13_Song_Duration(object instance)
        {
            var that = (global::Music_thing.Song)instance;
            return that.Duration;
        }
        private void set_13_Song_Duration(object instance, object Value)
        {
            var that = (global::Music_thing.Song)instance;
            that.Duration = (global::System.TimeSpan)Value;
        }
        private object get_14_Song_Year(object instance)
        {
            var that = (global::Music_thing.Song)instance;
            return that.Year;
        }
        private void set_14_Song_Year(object instance, object Value)
        {
            var that = (global::Music_thing.Song)instance;
            that.Year = (global::System.UInt32)Value;
        }
        private object get_15_Song_TrackNumber(object instance)
        {
            var that = (global::Music_thing.Song)instance;
            return that.TrackNumber;
        }
        private void set_15_Song_TrackNumber(object instance, object Value)
        {
            var that = (global::Music_thing.Song)instance;
            that.TrackNumber = (global::System.Int32)Value;
        }
        private object get_16_Song_Bitrate(object instance)
        {
            var that = (global::Music_thing.Song)instance;
            return that.Bitrate;
        }
        private void set_16_Song_Bitrate(object instance, object Value)
        {
            var that = (global::Music_thing.Song)instance;
            that.Bitrate = (global::System.UInt32)Value;
        }
        private object get_17_Song_File(object instance)
        {
            var that = (global::Music_thing.Song)instance;
            return that.File;
        }
        private void set_17_Song_File(object instance, object Value)
        {
            var that = (global::Music_thing.Song)instance;
            that.File = (global::Windows.Storage.StorageFile)Value;
        }
        private object get_18_Song_AlbumArt(object instance)
        {
            var that = (global::Music_thing.Song)instance;
            return that.AlbumArt;
        }
        private void set_18_Song_AlbumArt(object instance, object Value)
        {
            var that = (global::Music_thing.Song)instance;
            that.AlbumArt = (global::Windows.UI.Xaml.Media.Imaging.BitmapImage)Value;
        }
        private object get_19_ArtistList_Artists(object instance)
        {
            var that = (global::Music_thing.ArtistList)instance;
            return that.Artists;
        }
        private object get_20_Artist_name(object instance)
        {
            var that = (global::Music_thing.Artist)instance;
            return that.name;
        }
        private void set_20_Artist_name(object instance, object Value)
        {
            var that = (global::Music_thing.Artist)instance;
            that.name = (global::System.String)Value;
        }
        private object get_21_Artist_year(object instance)
        {
            var that = (global::Music_thing.Artist)instance;
            return that.year;
        }
        private void set_21_Artist_year(object instance, object Value)
        {
            var that = (global::Music_thing.Artist)instance;
            that.year = (global::System.Int32)Value;
        }
        private object get_22_NowPlaying_Playlist(object instance)
        {
            var that = (global::Music_thing.NowPlaying)instance;
            return that.Playlist;
        }
        private object get_23_SongList_Songs(object instance)
        {
            var that = (global::Music_thing.SongList)instance;
            return that.Songs;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::Music_thing.Music_thing_XamlTypeInfo.XamlMember xamlMember = null;
            global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Music_thing.AlbumList.Albums":
                userType = (global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Music_thing.AlbumList");
                xamlMember = new global::Music_thing.Music_thing_XamlTypeInfo.XamlMember(this, "Albums", "System.Collections.ObjectModel.ObservableCollection`1<Music_thing.Album>");
                xamlMember.Getter = get_0_AlbumList_Albums;
                xamlMember.Setter = set_0_AlbumList_Albums;
                break;
            case "Music_thing.Album.name":
                userType = (global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Music_thing.Album");
                xamlMember = new global::Music_thing.Music_thing_XamlTypeInfo.XamlMember(this, "name", "String");
                xamlMember.Getter = get_1_Album_name;
                xamlMember.Setter = set_1_Album_name;
                break;
            case "Music_thing.Album.artist":
                userType = (global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Music_thing.Album");
                xamlMember = new global::Music_thing.Music_thing_XamlTypeInfo.XamlMember(this, "artist", "String");
                xamlMember.Getter = get_2_Album_artist;
                xamlMember.Setter = set_2_Album_artist;
                break;
            case "Music_thing.Album.key":
                userType = (global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Music_thing.Album");
                xamlMember = new global::Music_thing.Music_thing_XamlTypeInfo.XamlMember(this, "key", "String");
                xamlMember.Getter = get_3_Album_key;
                xamlMember.Setter = set_3_Album_key;
                break;
            case "Music_thing.Album.year":
                userType = (global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Music_thing.Album");
                xamlMember = new global::Music_thing.Music_thing_XamlTypeInfo.XamlMember(this, "year", "Int32");
                xamlMember.Getter = get_4_Album_year;
                xamlMember.Setter = set_4_Album_year;
                break;
            case "Music_thing.Album.Songids":
                userType = (global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Music_thing.Album");
                xamlMember = new global::Music_thing.Music_thing_XamlTypeInfo.XamlMember(this, "Songids", "System.Collections.Generic.List`1<Int32>");
                xamlMember.Getter = get_5_Album_Songids;
                xamlMember.Setter = set_5_Album_Songids;
                break;
            case "Music_thing.AlbumPage.Songs":
                userType = (global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Music_thing.AlbumPage");
                xamlMember = new global::Music_thing.Music_thing_XamlTypeInfo.XamlMember(this, "Songs", "System.Collections.ObjectModel.ObservableCollection`1<Music_thing.Song>");
                xamlMember.Getter = get_6_AlbumPage_Songs;
                xamlMember.Setter = set_6_AlbumPage_Songs;
                break;
            case "Music_thing.Song.id":
                userType = (global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Music_thing.Song");
                xamlMember = new global::Music_thing.Music_thing_XamlTypeInfo.XamlMember(this, "id", "Int32");
                xamlMember.Getter = get_7_Song_id;
                xamlMember.Setter = set_7_Song_id;
                break;
            case "Music_thing.Song.FileName":
                userType = (global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Music_thing.Song");
                xamlMember = new global::Music_thing.Music_thing_XamlTypeInfo.XamlMember(this, "FileName", "String");
                xamlMember.Getter = get_8_Song_FileName;
                xamlMember.Setter = set_8_Song_FileName;
                break;
            case "Music_thing.Song.Title":
                userType = (global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Music_thing.Song");
                xamlMember = new global::Music_thing.Music_thing_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.Getter = get_9_Song_Title;
                xamlMember.Setter = set_9_Song_Title;
                break;
            case "Music_thing.Song.Artist":
                userType = (global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Music_thing.Song");
                xamlMember = new global::Music_thing.Music_thing_XamlTypeInfo.XamlMember(this, "Artist", "String");
                xamlMember.Getter = get_10_Song_Artist;
                xamlMember.Setter = set_10_Song_Artist;
                break;
            case "Music_thing.Song.AlbumArtist":
                userType = (global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Music_thing.Song");
                xamlMember = new global::Music_thing.Music_thing_XamlTypeInfo.XamlMember(this, "AlbumArtist", "String");
                xamlMember.Getter = get_11_Song_AlbumArtist;
                xamlMember.Setter = set_11_Song_AlbumArtist;
                break;
            case "Music_thing.Song.Album":
                userType = (global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Music_thing.Song");
                xamlMember = new global::Music_thing.Music_thing_XamlTypeInfo.XamlMember(this, "Album", "String");
                xamlMember.Getter = get_12_Song_Album;
                xamlMember.Setter = set_12_Song_Album;
                break;
            case "Music_thing.Song.Duration":
                userType = (global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Music_thing.Song");
                xamlMember = new global::Music_thing.Music_thing_XamlTypeInfo.XamlMember(this, "Duration", "TimeSpan");
                xamlMember.Getter = get_13_Song_Duration;
                xamlMember.Setter = set_13_Song_Duration;
                break;
            case "Music_thing.Song.Year":
                userType = (global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Music_thing.Song");
                xamlMember = new global::Music_thing.Music_thing_XamlTypeInfo.XamlMember(this, "Year", "UInt32");
                xamlMember.Getter = get_14_Song_Year;
                xamlMember.Setter = set_14_Song_Year;
                break;
            case "Music_thing.Song.TrackNumber":
                userType = (global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Music_thing.Song");
                xamlMember = new global::Music_thing.Music_thing_XamlTypeInfo.XamlMember(this, "TrackNumber", "Int32");
                xamlMember.Getter = get_15_Song_TrackNumber;
                xamlMember.Setter = set_15_Song_TrackNumber;
                break;
            case "Music_thing.Song.Bitrate":
                userType = (global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Music_thing.Song");
                xamlMember = new global::Music_thing.Music_thing_XamlTypeInfo.XamlMember(this, "Bitrate", "UInt32");
                xamlMember.Getter = get_16_Song_Bitrate;
                xamlMember.Setter = set_16_Song_Bitrate;
                break;
            case "Music_thing.Song.File":
                userType = (global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Music_thing.Song");
                xamlMember = new global::Music_thing.Music_thing_XamlTypeInfo.XamlMember(this, "File", "Windows.Storage.StorageFile");
                xamlMember.Getter = get_17_Song_File;
                xamlMember.Setter = set_17_Song_File;
                break;
            case "Music_thing.Song.AlbumArt":
                userType = (global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Music_thing.Song");
                xamlMember = new global::Music_thing.Music_thing_XamlTypeInfo.XamlMember(this, "AlbumArt", "Windows.UI.Xaml.Media.Imaging.BitmapImage");
                xamlMember.Getter = get_18_Song_AlbumArt;
                xamlMember.Setter = set_18_Song_AlbumArt;
                break;
            case "Music_thing.ArtistList.Artists":
                userType = (global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Music_thing.ArtistList");
                xamlMember = new global::Music_thing.Music_thing_XamlTypeInfo.XamlMember(this, "Artists", "System.Collections.ObjectModel.ObservableCollection`1<Music_thing.Artist>");
                xamlMember.Getter = get_19_ArtistList_Artists;
                xamlMember.SetIsReadOnly();
                break;
            case "Music_thing.Artist.name":
                userType = (global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Music_thing.Artist");
                xamlMember = new global::Music_thing.Music_thing_XamlTypeInfo.XamlMember(this, "name", "String");
                xamlMember.Getter = get_20_Artist_name;
                xamlMember.Setter = set_20_Artist_name;
                break;
            case "Music_thing.Artist.year":
                userType = (global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Music_thing.Artist");
                xamlMember = new global::Music_thing.Music_thing_XamlTypeInfo.XamlMember(this, "year", "Int32");
                xamlMember.Getter = get_21_Artist_year;
                xamlMember.Setter = set_21_Artist_year;
                break;
            case "Music_thing.NowPlaying.Playlist":
                userType = (global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Music_thing.NowPlaying");
                xamlMember = new global::Music_thing.Music_thing_XamlTypeInfo.XamlMember(this, "Playlist", "System.Collections.ObjectModel.ObservableCollection`1<Music_thing.Song>");
                xamlMember.Getter = get_22_NowPlaying_Playlist;
                xamlMember.SetIsReadOnly();
                break;
            case "Music_thing.SongList.Songs":
                userType = (global::Music_thing.Music_thing_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Music_thing.SongList");
                xamlMember = new global::Music_thing.Music_thing_XamlTypeInfo.XamlMember(this, "Songs", "System.Collections.ObjectModel.ObservableCollection`1<Music_thing.Song>");
                xamlMember.Getter = get_23_SongList_Songs;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);
    internal delegate object CreateFromStringMethod(string args);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::Music_thing.Music_thing_XamlTypeInfo.XamlSystemBaseType
    {
        global::Music_thing.Music_thing_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::Music_thing.Music_thing_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (CreateFromStringMethod != null)
            {
                return this.CreateFromStringMethod(input);
            }
            else if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }
        public CreateFromStringMethod CreateFromStringMethod {get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::Music_thing.Music_thing_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::Music_thing.Music_thing_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

